{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\mobil\\\\react-native-expo-template-master\\\\template-with-bottom-tabs\\\\App.js\";\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport * as Font from 'expo-font';\nimport 'moment/locale/id';\nimport { Ubuntu_300Light, Ubuntu_300Light_Italic, Ubuntu_400Regular, Ubuntu_400Regular_Italic, Ubuntu_500Medium, Ubuntu_500Medium_Italic, Ubuntu_700Bold, Ubuntu_700Bold_Italic } from '@expo-google-fonts/ubuntu';\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport Colors from \"./constants/colors\";\nexport default function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 4\n      }\n    });\n  } else {\n    return React.createElement(SafeAreaView, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 4\n      }\n    }, React.createElement(StatusBar, {\n      style: \"auto\",\n      translucent: true,\n      backgroundColor: Colors.statusBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }), React.createElement(AppNavigator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }));\n  }\n}\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/icon.png\"), require(\"./assets/splash.png\")]), Font.loadAsync({\n            Ubuntu_300Light: Ubuntu_300Light,\n            Ubuntu_300Light_Italic: Ubuntu_300Light_Italic,\n            Ubuntu_400Regular: Ubuntu_400Regular,\n            Ubuntu_400Regular_Italic: Ubuntu_400Regular_Italic,\n            Ubuntu_500Medium: Ubuntu_500Medium,\n            Ubuntu_500Medium_Italic: Ubuntu_500Medium_Italic,\n            Ubuntu_700Bold: Ubuntu_700Bold,\n            Ubuntu_700Bold_Italic: Ubuntu_700Bold_Italic\n          })]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/mobil/react-native-expo-template-master/template-with-bottom-tabs/App.js"],"names":["React","useState","AppLoading","Asset","SafeAreaView","StatusBar","Font","Ubuntu_300Light","Ubuntu_300Light_Italic","Ubuntu_400Regular","Ubuntu_400Regular_Italic","Ubuntu_500Medium","Ubuntu_500Medium_Italic","Ubuntu_700Bold","Ubuntu_700Bold_Italic","AppNavigator","Colors","App","props","isLoadingComplete","setLoadingComplete","skipLoadingScreen","loadResourcesAsync","handleLoadingError","handleFinishLoading","styles","container","statusBar","Promise","all","loadAsync","require","error","console","warn","StyleSheet","create","flex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,kBAAP;AACA,SACCC,eADD,EAECC,sBAFD,EAGCC,iBAHD,EAICC,wBAJD,EAKCC,gBALD,EAMCC,uBAND,EAOCC,cAPD,EAQCC,qBARD,QASO,2BATP;AAUA,OAAOC,YAAP;AACA,OAAOC,MAAP;AAEA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA,kBACcjB,QAAQ,CAAC,KAAD,CADtB;AAAA;AAAA,MAC3BkB,iBAD2B;AAAA,MACRC,kBADQ;;AAGlC,MAAI,CAACD,iBAAD,IAAsB,CAACD,KAAK,CAACG,iBAAjC,EAAoD;AACnD,WACC,oBAAC,UAAD;AACC,MAAA,UAAU,EAAEC,kBADb;AAEC,MAAA,OAAO,EAAEC,kBAFV;AAGC,MAAA,QAAQ,EAAE;AAAA,eAAMC,mBAAmB,CAACJ,kBAAD,CAAzB;AAAA,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAOA,GARD,MAQO;AACN,WACC,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEK,MAAM,CAACC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,SAAD;AACC,MAAA,KAAK,EAAC,MADP;AAEC,MAAA,WAAW,MAFZ;AAGC,MAAA,eAAe,EAAEV,MAAM,CAACW,SAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAMC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,CADD;AAUA;AACD;;AAED,SAAeL,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEOM,OAAO,CAACC,GAAR,CAAY,CACjB1B,KAAK,CAAC2B,SAAN,CAAgB,CACfC,OAAO,qBADQ,EAEfA,OAAO,uBAFQ,CAAhB,CADiB,EAKjBzB,IAAI,CAACwB,SAAL,CAAe;AACdvB,YAAAA,eAAe,EAAfA,eADc;AAEdC,YAAAA,sBAAsB,EAAtBA,sBAFc;AAGdC,YAAAA,iBAAiB,EAAjBA,iBAHc;AAIdC,YAAAA,wBAAwB,EAAxBA,wBAJc;AAKdC,YAAAA,gBAAgB,EAAhBA,gBALc;AAMdC,YAAAA,uBAAuB,EAAvBA,uBANc;AAOdC,YAAAA,cAAc,EAAdA,cAPc;AAQdC,YAAAA,qBAAqB,EAArBA;AARc,WAAf,CALiB,CAAZ,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASS,kBAAT,CAA4BS,KAA5B,EAAmC;AAGlCC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACA;;AAED,SAASR,mBAAT,CAA6BJ,kBAA7B,EAAiD;AAChDA,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AACD,IAAMK,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAChCV,EAAAA,SAAS,EAAE;AACVW,IAAAA,IAAI,EAAE;AADI;AADqB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport { StyleSheet } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport * as Font from 'expo-font';\nimport 'moment/locale/id';\nimport {\n\tUbuntu_300Light,\n\tUbuntu_300Light_Italic,\n\tUbuntu_400Regular,\n\tUbuntu_400Regular_Italic,\n\tUbuntu_500Medium,\n\tUbuntu_500Medium_Italic,\n\tUbuntu_700Bold,\n\tUbuntu_700Bold_Italic,\n} from '@expo-google-fonts/ubuntu';\nimport AppNavigator from './navigation/AppNavigator';\nimport Colors from './constants/colors';\n\nexport default function App(props) {\n\tconst [isLoadingComplete, setLoadingComplete] = useState(false);\n\n\tif (!isLoadingComplete && !props.skipLoadingScreen) {\n\t\treturn (\n\t\t\t<AppLoading\n\t\t\t\tstartAsync={loadResourcesAsync}\n\t\t\t\tonError={handleLoadingError}\n\t\t\t\tonFinish={() => handleFinishLoading(setLoadingComplete)}\n\t\t\t/>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<SafeAreaView style={styles.container}>\n\t\t\t\t<StatusBar\n\t\t\t\t\tstyle=\"auto\"\n\t\t\t\t\ttranslucent\n\t\t\t\t\tbackgroundColor={Colors.statusBar}\n\t\t\t\t/>\n\t\t\t\t<AppNavigator />\n\t\t\t</SafeAreaView>\n\t\t);\n\t}\n}\n\nasync function loadResourcesAsync() {\n\t// load all resources such as images, fonts, etc.\n\tawait Promise.all([\n\t\tAsset.loadAsync([\n\t\t\trequire('./assets/icon.png'),\n\t\t\trequire('./assets/splash.png'),\n\t\t]),\n\t\tFont.loadAsync({\n\t\t\tUbuntu_300Light,\n\t\t\tUbuntu_300Light_Italic,\n\t\t\tUbuntu_400Regular,\n\t\t\tUbuntu_400Regular_Italic,\n\t\t\tUbuntu_500Medium,\n\t\t\tUbuntu_500Medium_Italic,\n\t\t\tUbuntu_700Bold,\n\t\t\tUbuntu_700Bold_Italic,\n\t\t}),\n\t]);\n}\n\nfunction handleLoadingError(error) {\n\t// In this case, you might want to report the error to your error reporting\n\t// service, for example Sentry\n\tconsole.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n\tsetLoadingComplete(true);\n}\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}